{"version":3,"file":"epic-decorator.js","sourceRoot":"","sources":["../../src/epic-decorator.ts"],"names":[],"mappings":"AAAA,OAAO,EAAkB,YAAY,EAAE,oBAAoB,EAAE,MAAM,kBAAkB,CAAC;AACtF,IAAM,YAAY,GAAG,qCAAqC,CAAC;AAK3D,MAAM;IACJ,MAAM,CAAC,UAAU,MAAW,EAAE,YAAoB;QAEhD,EAAE,CAAC,CAAC,CAAE,OAAe,CAAC,cAAc,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;YAC1D,OAAe,CAAC,cAAc,CAAC,YAAY,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;QAC5D,CAAC;QAED,IAAM,KAAK,GAAoB,OAAe,CAAC,cAAc,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QACpF,IAAM,QAAQ,GAAiB,EAAE,YAAY,cAAA,EAAE,CAAC;QAC/C,OAAe,CAAC,cAAc,CAAC,YAAY,EAAM,KAAK,SAAE,QAAQ,IAAG,MAAM,CAAC,CAAC;IAC9E,CAAC,CAAC;AACJ,CAAC;AAED,MAAM,2BAA2B,QAAa;IAC5C,IAAM,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IAC/C,EAAE,CAAC,CAAC,CAAE,OAAe,CAAC,cAAc,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;QAC3D,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IACD,MAAM,CAAE,OAAe,CAAC,cAAc,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;AAE/D,CAAC;AAED,MAAM;IAAyB,mBAAmB;SAAnB,UAAmB,EAAnB,qBAAmB,EAAnB,IAAmB;QAAnB,8BAAmB;;IAChD,IAAM,aAAa,GAAG,SAAS;SAC5B,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,gBAAgB,CAAC,QAAQ,CAAC;SACxC,GAAG,CAAC,UAAC,EAAc;YAAb,8BAAY;QAAM,OAAA,QAAQ,CAAC,YAAY,CAAC;IAAtB,CAAsB,CAAC,EADjC,CACiC,CAAC,CAAC;IAEtD,IAAM,KAAK,GAAG,EAAE,CAAC,MAAM,OAAT,EAAE,EAAW,aAAa,CAAC,CAAC;IAC1C,IAAM,QAAQ,GAAG,YAAY,eAAO,KAAK,CAAC,CAAC;IAC3C,MAAM,CAAC,oBAAoB,CAAI,QAAQ,CAAC,CAAC;AAE3C,CAAC","sourcesContent":["import { EpicMiddleware, combineEpics, createEpicMiddleware } from 'redux-observable';\nconst METADATA_KEY = 'redux-observable-decorator-metadata';\n\nexport interface EpicMetadata {\n  propertyName: string;\n}\nexport function Epic(): PropertyDecorator {\n  return function (target: any, propertyName: string) {\n\n    if (!(Reflect as any).hasOwnMetadata(METADATA_KEY, target)) {\n      (Reflect as any).defineMetadata(METADATA_KEY, [], target);\n    }\n\n    const epics: EpicMetadata[] = (Reflect as any).getOwnMetadata(METADATA_KEY, target);\n    const metadata: EpicMetadata = { propertyName };\n    (Reflect as any).defineMetadata(METADATA_KEY, [...epics, metadata], target);\n  };\n}\n\nexport function getEpicsMetadata(instance: any): EpicMetadata[] {\n  const target = Object.getPrototypeOf(instance);\n  if (!(Reflect as any).hasOwnMetadata(METADATA_KEY, target)) {\n    return [];\n  }\n  return (Reflect as any).getOwnMetadata(METADATA_KEY, target);\n\n}\n\nexport function createEpics<T>(...instances: any[]): EpicMiddleware<T> {\n  const epicsMetaData = instances\n    .map(instance => getEpicsMetadata(instance)\n      .map(({propertyName}) => instance[propertyName]));\n\n  const epics = [].concat(...epicsMetaData);\n  const rootEpic = combineEpics<T>(...epics);\n  return createEpicMiddleware<T>(rootEpic);\n\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}